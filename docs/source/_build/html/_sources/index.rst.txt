SCIP: Scalable Cytometry Image Processing
=========================================

Installation
------------

SCIP requires an MPI implementation to be present on the path. If no implementation is present,
mpi4py can be installed in a conda environment.

We recommend using `mamba <https://github.com/mamba-org/mamba>`_ as a drop-in replacement for conda.

1. Create a new python environment: ``mamba create -n scip python=3.{8,9}`` (choose a version)
2. Activate environment: ``conda activate scip``
3. (Optional) Install mpi4py: ``mamba install -c conda-forge mpi4py``
4. Download SCIP from Github
5. Install SCIP: ``pip install .`` or ``pip install -e .`` for development
6. (Optional) Install development dependencies: ``pip install -r requirements.txt``

Usage
-----

SCIP can be used as a command line interface (CLI) or its modules can be imported in a custom script. See the API documentation for the latter option.

The CLI runs a workflow that loads images and performs segmentation, masking, filtering and feature extraction. The CLI can be configured via options passed on the command line (for runtime configuration) and via a YAML config file (for pipeline configuration). For an overview of the command line options, run ``scip --help``.

The YAML config file has the following specification:

.. code-block::

      loading:
         format: czi, multiframe_tiff, tiff, zarr  # loader module to use
         channels: [0]  # list of channel indexes, e.g. index of frame in multiframe tiff
         channel_names:  # list of channel names
            - "channel_0"
         loader_kwargs:  # keyword arguments passed to loader function
            regex:  # regex pattern, can contain match groups for extracting metadata from filename

            # CellPose arguments
            segment_method: cellpose
            segment_kw:
               cell_diameter: 30  # expected cell diameter
               dapi_channel_index: 0
               main_channel_index: 2
            project_method: "op"
            project_kw:
               op: "max"

            # CZI loader arguments
            scenes: ["A2-A2", "A1-A1"]
      masking:
         method: watershed, threshold  # masking module to use
         bbox_channel_index: 0  # index of channel that shows cytoplasm
         export: false  # set to true to export masks
         combined_indices: [0]  # list of channel indexes of which masks will be combined
         kwargs:  # keyword arguments passed to masking function
            smooth: 1
            noisy_channels: []
      filter:
      normalization:
         lower: 0
         upper: 1
      feature_extraction:
         types: ["shape", "intensity", "bbox", "texture"]
      export:
         format: parquet
         filename: features

Input
^^^^^
SCIP handles three types of input:

- one or more directories of (multiframe) TIFF images,
- one or more Carl Zeiss Image (CZI) images, and
- one or more `zarr files <https://zarr.readthedocs.io/en/stable/>`_.

Zarr
""""
Imaging flow cytometry datasets typically contain a vast amount of small image files, which are
inefficient and cumbersome to store and load. Zarr compatibility was added to SCIP so that these
images can be grouped into a couple of zarr files, which are much easier to handle.

The images are stored in the zarr file using the VLenArray object codec, which supports arrays of
varying length. This is described in `the zarr documentation <https://zarr.readthedocs.io/en/stable/tutorial.html?highlight=ragged#ragged-arrays>`_.
This way the images don't have to be cropped or padded to account
for their varying X and Y dimensions. The images do have to be flattened as the coded only
supports 1D arrays. SCIP reshapes the images upon loading using the shape attribute described below.

The zarr file should have two attributes:

1. "object_number": A list containing a unique identifier for each image.
2. "shape": A list containing the unflattened shape of each image.

SCIP assumes that the length of the lists in both attributes is equal to the length
of the zarr array.

API
---
.. toctree::
   :maxdepth: 2

   scip

Indices and tables
------------------

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
